[filament_switch_sensor switch_sensor]
switch_pin: ^PG14
pause_on_runout: False
runout_gcode:
  #PAUSE # [pause_resume] is required in printer.cfg
  PAUSE_AFTER_D D={750}
  M117 Filament switch runout
insert_gcode:
  M117 Filament switch inserted

[filament_motion_sensor encoder_sensor]
switch_pin: ^PG15
detection_length: 7.88 #2.88 is original value
extruder: extruder
pause_on_runout: False
event_delay: 2 #1.5 original
pause_delay: 0.5 
runout_gcode:
  PAUSE # [pause_resume] is required in printer.cfg
  M117 Filament encoder runout
insert_gcode:
  M117 Filament encoder inserted

#[filament_switch_sensor fila]
#pause_on_runout: False #we dont want it to pause immediately
#runout_gcode:
  #positions here are in printer coordinates eg if you have a 300mm bed and your sensor is 7cm past the 
  #max y position then y_offset should be 370
  #{% set x_offset = 150 %}  #approximate x location of the runout sensor
  #{% set y_offset = 370 %}    #approximate y location of the runout sensor
  #z location not used but this can be easily extended to include a z offset if needed

  #{% set current_x = printer.toolhead.position.x %}
  #{% set current_y = printer.toolhead.position.y %}

  #{% set distance = ((x_offset - current_x)**2 + (y_offset - current_y)**2)**(1/2) %}
  
#  PAUSE_AFTER_D D={750}

#switch_pin: PC4 #change this to the pin your runout switch is hooked up to

[gcode_macro SFS_ENABLE]
description: Enable smart filament sensor
gcode:
  M117 ENABLING the Smart Filament Sensor
  G92 E0
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1 ;

[gcode_macro SFS_DISABLE]
description: Disable smart filament sensor
gcode:
  M117 DISABLING the Smart Filament Sensor
  G92 E0
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 ;

[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts 
initial_duration: 1
gcode:
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 ;

[delayed_gcode ENABLE_SFS]
gcode:
    SFS_ENABLE  ; Re-enable the smart filament sensor after a delay

#####################################################
# Filament Runout
#####################################################
[gcode_macro M600]
gcode:
    #led_unloading
    {% set X = params.X|default(150)|float %}
    {% set Y = params.Y|default(25)|float %}
    {% set Z = params.Z|default(25)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-15 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PAUSE_AFTER_D]
description: Trigger to pause the print after a further '750' mm has been extruded
variable_end_d: 0 #create variable "END_D" which is associated with the PAUSE_AFTER_D gcode macro
gcode:
  {% set d_start = printer.print_stats.filament_used|float %} #starting point is whatever the filament used is when PAUSE_AFTER_D is called
  {% set d_end = (d_start + params.D|float)|float %} #end point is start + D parameter
  SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=end_d VALUE={d_end} #write the end value to the END_D gcode variable to access later
  M117 Pause at {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #trigger the delayed gcode below after 1 second

[delayed_gcode PAUSE_AT_D]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
  {% set d_current = printer.print_stats.filament_used|float %} #get the current filament used
  {% if d_current < printer["gcode_macro PAUSE_AFTER_D"].end_d %} #if we aren't at the stopping point
    M117 Stopping {d_current|round(2)} {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #restart the timer on the delayed gcode
  {% else %}
    PAUSE
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 #set the delayed gcode duration back to zero so it doesn't keep triggering
  {% endif %}
