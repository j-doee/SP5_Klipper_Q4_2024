#####################################################################
# 	Filament Loading/Unloading
#####################################################################

[gcode_macro CUT_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=cut_filament_state
  M83
  G1 E-5 F800
  G1 Y5 F7200
  G1 Y0.5 F400
  G1 E-2 F800
  G4 P500
  G1 Y15 F3600
  G1 Y300 F8000 ## end cut
  RESTORE_GCODE_STATE NAME=cut_filament_state

[gcode_macro PARK]
gcode:
  SAVE_GCODE_STATE NAME=park_state
  M117 Moving to park position...
  G90              ; Absolute positioning
  G1 X303 F7200
  G1 Y305 F2400  ; Move to purge bin position
  M117 Parked!
  RESTORE_GCODE_STATE NAME=park_state

[gcode_macro UNLOAD]
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  M117 Unloading filament...
  M104 S{params.TEMP|default(250, true)}

  # Check if the printer is printing and paused
  {% if printer.print_stats.state == "printing" and printer.pause_resume.is_paused %}
    # Skip these lines if the printer is printing and paused
  {% else %}
    _CG28XY
    G90
	PARK
  {% endif %}

  M83 ;relative positioning
  M117 Heating...
  M109 S{params.TEMP|default(250, true)} ; Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  CUT_FILAMENT
  G1 Y305 F2400
  G0 E50 F800        ;Purge
  G0 E-5 F1000       ;Quick Retract
  G4 S2000 ; Wait 
  G0 E-100 F800       ;Unload the rest of the filament
  M104 S0
  M106 S255
  G4 P5000
  G1 Y290 F12000
  G1 Y305 F2400
  G1 Y290 F12000
  G1 Y305 F2400
  G1 Y290 F12000
  G1 Y305 F2400
  G1 Y290 F12000
  G1 Y305 F2400
  G1 Y200 F12000
  G1 X275 F12000
  G1 Y290 F3600
  G4 P5000
  M106 S0
  M84
  M117 Filament unloaded!
  RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD]
gcode:
  SAVE_GCODE_STATE NAME=load_state
  M104 S{params.TEMP|default(250, true)}

  # Check if the printer is printing and paused
  {% if printer.print_stats.state == "printing" and printer.pause_resume.is_paused %}
    # Skip these lines if the printer is printing and paused
  {% else %}
    _CG28XY
    G90            ; Absolute positioning for all axes
    PARK           ; Move to park position
  {% endif %}

  M83 ; Relative positioning for extruder only
  M117 Heating...
  M109 S{params.TEMP|default(250, true)} ; Heat up hotend to provided temp or 220 as default.
  
  M117 Loading filament...
  G0 E150 F800    ; Load the filament into the hotend area.
  G0 E20 F600     ; Purge filament
  M400            ; Wait for all moves to complete
  M104 S150       ; Reduce hotend temperature to prevent overheating
  
  M106 S255       ; Turn on the fan
  G4 P5000        ; Wait for 5 seconds
  G1 Y290 F12000  ; Series of rapid Y-axis moves
  G1 Y305 F2400
  G1 Y290 F12000
  G1 Y305 F2400
  G1 Y290 F12000
  G1 Y305 F2400
  G1 Y290 F12000
  G1 Y305 F2400
  G1 Y200 F12000
  G1 X275 F12000
  G1 Y290 F3600
  
  G4 P5000        ; Wait for 5 seconds
  M106 S0         ; Turn off the fan

  # Conditional check for M84: Disable motors only if not printing
  {% if printer.print_stats.state != "printing" %}
    M84            ; Disable motors if not printing
  {% endif %}

  M117 Filament loaded!
  RESTORE_GCODE_STATE NAME=load_state

#####################################################################
# 	Homing Macros
#####################################################################

[gcode_macro _CG28XY]
gcode:
    {% if "x" not in printer.toolhead.homed_axes %}
        G28 X    ; Home X only
    {% endif %}
    {% if "y" not in printer.toolhead.homed_axes %}
        G28 Y    ; Home Y only
    {% endif %}

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro LOWER_Z]
gcode:
  SET_KINEMATIC_POSITION Z=10
  G91
  G1 Z5 F6000

[homing_override]
set_position_z: 5
axes: xyz
gcode:
  LOWER_Z #Force Z to move down 5mm for safe Z home
  G90
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
  {% if home_all or 'X' in params or ('Z' in params and 'x' not in printer.toolhead.homed_axes) %}
  _HOME_X
  {% endif %}
  {% if home_all or 'Y' in params or ('Z' in params and 'y' not in printer.toolhead.homed_axes) %}
  _HOME_Y
  {% endif %}
  {% if home_all or 'Z' in params %}
  G90
  G1 X174.10 Y177.30 F4000
  G28 Z
  M300 S100 P200
  G1 Z10
  {% endif %} 

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    M300 S100 P200
    G91
    G1 X10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    M300 S100 P200
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

#####################################################################
# 	Print Macros
#####################################################################

[gcode_macro START_PRINT]
gcode:
  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1 ; enable
  M117 Starting Print...
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
##  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  M220 S100 ; Speed factor 100%
  M221 S100 ; extrusion rate 100
  M140 S{target_bed}
  _CG28 ; Home ALL
  # Start bed heating
  M104 S150
  M190 S{target_bed}
  # Home Z
  G28 Z
  Z_TILT_ADJUST
  G28 Z
  BED_MESH_CALIBRATE ADAPTIVE=1
  # Final Heating
  #Smart_Park
  M83
#  G1 X4.0 Y15.0 Z0.8 F18000;Move to start position
  M109 S{target_extruder}
  UPDATE_DELAYED_GCODE ID=ENABLE_SFS DURATION=4  ; Delay filament sensor enable by 4 seconds
    
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
        SFS_DISABLE                                                                          ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
#        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        PARK                                                                     			 ; park toolhead at bin
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S80                                                                             ; set hotend min temp 80c
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(100)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
        {% if etemp > 0 %}
            M109 S{etemp|int}  ; Wait for hotend to heat back up
        {% endif %}
        
        G91  ; Relative positioning
        M83  ; Relative extruder positioning

        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 E{e} F800
            M400
            G1 Z{zhop * -1} F800  ; Prime nozzle and lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900  ; Lower Z without extruding if too cold
        {% endif %}        
        
        # Restore previous print position before the pause
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=200  ; Move back to the previous print position
        BASE_RESUME  ; Resume the print
        UPDATE_DELAYED_GCODE ID=ENABLE_SFS DURATION=4  ; Delay filament sensor re-enable by 4 seconds
    {% endif %}

[gcode_macro END_PRINT]
variable_max_layer_z: 0
gcode:
  # Turn off heaters and fan
  M140 S0              ; Bed off
  M104 S0              ; Extruder off
  M106 S0              ; Fan off
  
  # Disable filament sensor
  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
  SFS_DISABLE
  
  # Retract and move nozzle slightly away
  G91
  G1 X-2 Y-2 E-1 F3600 ; Retract and move nozzle
  G90

  # Raise nozzle safely
  {% if max_layer_z + 100.0 < 330 %}
    G1 Z{max_layer_z + 100.0} F600
  {% else %}
    G1 Z300 F600
  {% endif %}
  
  # Move to park position
  G1 X305 Y300 F6000

  # Reset Z offset, disable steppers, and play end tones
  SET_GCODE_OFFSET Z=0
  M84
  end_tones

[gcode_macro CANCEL_PRINT]
gcode:
  M400                    ; Wait for buffer to clear
  G92 E0                  ; Zero the extruder
  END_PRINT               ; Call the streamlined END_PRINT macro
  TURN_OFF_HEATERS        ; Turn off any remaining heaters
  CLEAR_PAUSE             ; Clear pause state
  SDCARD_RESET_FILE       ; Reset SD card for next file

[gcode_macro RESTORE_TRAVEL_SPEED]
gcode:
    ## Get max_velocity and max_accel values from config
    {% set re_speed = printer.toolhead.max_velocity %}
    {% set re_accel = printer.toolhead.max_accel %}

    ## Optionally, ignore the above and set manual values if supplied as parameters
    ## {% set re_speed = params.SPEED|default(re_speed)|int %}
    ## {% set re_accel = params.ACCEL|default(re_accel)|int %}

    ## Multiply speed by 60 to convert mm/s to mm/min for G-code
    {% set re_speed = re_speed * 60 %}

    ## Temporarily set relative positioning mode
    G91

    ## Apply the speed and acceleration values
    SET_VELOCITY_LIMIT VELOCITY={re_speed} ACCEL={re_accel}
    G0 X0 Y0 Z0 F{re_speed}

    ## Return to absolute positioning
    G90


[gcode_macro NOTIFY]
# Notify macro
gcode:
  {% if 'MSG' in params %}
    RESPOND TYPE=command MSG="action:notification {params.MSG}"
  {% endif %}
  
[gcode_macro M80]
gcode:
  SET_PIN PIN=power VALUE=0
  STATUS
  
[gcode_macro M81]
gcode:
  SET_PIN PIN=power VALUE=1
  STATUS

#####################################################################
# 	Beeper Pin Control
#####################################################################

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro START_TONES]
[gcode_macro START_TONES]
gcode:
    M300 S1000 P5000 ; chirp to indicate starting to print

[gcode_macro END_TONES]
gcode:
    M300 S440 P2000 ; Make Print Completed Tones
    M300 S660 P200
    M300 S880 P2000
	
#####################################################################
# 	Misc
#####################################################################

[gcode_macro TUNE_BELTS]
gcode:
  _CG28XY
  G90
  G1 X152.50 Y172.50 F7200
  SET_IDLE_TIMEOUT TIMEOUT=43200

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off


[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c $0"
timeout: 90.0
verbose: True
